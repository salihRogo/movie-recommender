"""Debug Model Coverage

This script helps diagnose the model's movie coverage issues by:
1. Loading the model and examining its components
2. Analyzing the movie distribution in the model
3. Verifying if specific movies can be found using different ID lookup methods
"""

import pandas as pd
import numpy as np
import joblib
from pathlib import Path
import sys
import logging
import json
import requests
import time

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Add backend directory to path for imports
BACKEND_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(BACKEND_DIR))

# Import settings from app
from app.core.config import settings

# Constants
MODELS_DIR = BACKEND_DIR / "models"
API_URL = "http://localhost:8000"

# Test profile IMDb IDs
TEST_IMDB_IDS = [
    "tt0111161", "tt0068646", "tt0071562", "tt0468569", 
    "tt0050083", "tt0108052", "tt0167260", "tt0110912", 
    "tt0060196", "tt0120737", "tt0137523", "tt0109830", 
    "tt1375666", "tt0080684", "tt0114709", "tt0133093"
]

def load_model_components():
    """Load all model components and mappings"""
    logger.info("Loading model components...")
    components = {}
    
    # List of files to load
    files = [
        "svd_model_components.joblib",
        "raw_to_inner_uid_map.joblib",
        "raw_to_inner_iid_map.joblib",
        "inner_to_raw_iid_map.joblib",
        "all_movie_imdb_ids.joblib",
        "popular_movies_fallback.joblib"  # This is generated by UnifiedRecommenderService on first run and saved.
    ]
    
    for file in files:
        try:
            path = MODELS_DIR / file
            components[file.replace('.joblib', '')] = joblib.load(path)
            logger.info(f"Loaded {file}")
        except Exception as e:
            logger.error(f"Failed to load {file}: {e}")
    
    return components

def analyze_model_components(components):
    """Analyze model components and provide detailed statistics"""
    # Check raw_to_inner_iid_map
    if 'raw_to_inner_iid_map' in components:
        iid_map = components['raw_to_inner_iid_map']
        logger.info(f"Model contains {len(iid_map)} unique movieIDs")
        
        # Check key types
        key_types = {}
        for k in list(iid_map.keys())[:10]:
            key_types[type(k).__name__] = key_types.get(type(k).__name__, 0) + 1
        logger.info(f"Item key types: {key_types}")
        
        # Check a few sample keys
        sample_keys = list(iid_map.keys())[:5]
        logger.info(f"Sample item keys: {sample_keys}")
    
    # IMDb to MovieLens mapping checks removed as these files are no longer generated by train_model_from_db.py.
    
    # Check popular movie fallbacks
    if 'popular_movies_fallback' in components:
        popular = components['popular_movies_fallback']
        logger.info(f"Popular movies fallback contains {len(popular)} movies")
        logger.info(f"Sample popular movies: {popular[:5]}")

def check_id_lookup_paths(components):
    """Check direct IMDb ID to inner ID lookup path."""
    if 'raw_to_inner_iid_map' not in components:
        logger.error("Missing 'raw_to_inner_iid_map' component for ID lookup check.")
        return
    
    raw_to_inner_iid_map = components['raw_to_inner_iid_map']
    
    for imdb_id in TEST_IMDB_IDS[:5]:
        logger.info(f"\nTesting lookup path for IMDb ID: {imdb_id}")
        
        # Path 1: Direct IMDb ID to inner ID (current style)
        inner_id_direct = raw_to_inner_iid_map.get(imdb_id)
        logger.info(f"  Direct lookup (IMDb ID → inner ID): {imdb_id} → {inner_id_direct}")
        
        # Success evaluation
        success = inner_id_direct is not None
        logger.info(f"  ▶ Lookup success: {success}")

def test_api_with_specific_profiles():
    """Test the API with very specific profiles to diagnose issues"""
    logger.info("\nTesting API with specific profiles...")
    
    # Set of tests to perform
    tests = [
        {
            "name": "Single movie profile",
            "profile": ["tt0111161"],  # Shawshank Redemption
            "desc": "Test with a single well-known movie"
        },
        {
            "name": "Two movie profile",
            "profile": ["tt0111161", "tt0068646"],  # Shawshank + Godfather
            "desc": "Test with two well-known movies"
        },
        {
            "name": "All test movies profile",
            "profile": TEST_IMDB_IDS,
            "desc": "Test with all test movies"
        }
    ]
    
    for test in tests:
        logger.info(f"\n▶ Test: {test['name']} - {test['desc']}")
        try:
            response = requests.post(
                f"{API_URL}/recommendations/by_profile",
                json={"imdb_ids": test['profile'], "n": 10}
            )
            
            if response.status_code == 200:
                data = response.json()
                recommendations = data.get('recommendations', [])
                message = data.get('message', '')
                
                logger.info(f"  Status: {response.status_code}")
                logger.info(f"  Message: {message}")
                logger.info(f"  Got {len(recommendations)} recommendations")
                
                if recommendations:
                    logger.info(f"  First few recommendations: {recommendations[:3]}")
                else:
                    logger.info("  No recommendations returned")
            else:
                logger.error(f"  API request failed: {response.status_code}")
                logger.error(f"  Response: {response.text}")
        
        except Exception as e:
            logger.error(f"  Error during API test: {e}")
        
        # Brief pause between tests
        time.sleep(0.5)

def main():
    """Main function to run diagnostics"""
    logger.info("Starting model coverage diagnostics...")
    
    # Load model components
    components = load_model_components()
    if not components:
        logger.error("Failed to load model components")
        return False
        
    # Analyze model components
    analyze_model_components(components)
    
    # Check ID lookup paths
    check_id_lookup_paths(components)
    
    # Test API with specific profiles
    test_api_with_specific_profiles()
    
    logger.info("Diagnostics complete!")
    return True

if __name__ == "__main__":
    main()
